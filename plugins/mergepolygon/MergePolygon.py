# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MergePolygon
                                 A QGIS plugin
 Plugin for merging two polygons
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-03-18
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Priyanshi Pal
        email                : priyaksum2000@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication,QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction,QFileDialog, QLabel
from qgis.core import QgsVectorLayer,QgsProject,QgsPalLayerSettings,QgsPointXY,QgsVectorLayerSimpleLabeling,QgsFeature,QgsGeometry,QgsField,QgsVectorDataProvider
from qgis.utils import iface
from shapely.geometry import Polygon,MultiPolygon
from datetime import date

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .MergePolygon_dialog import MergePolygonDialog
import os.path
import shapely
import geopandas as gpd
import utm
import psycopg2
import fiona
import shapefile
import csv
import pandas as pd
import geopandas as gpd
import shutil
class MergePolygon:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'MergePolygon_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&MergePolygon')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('MergePolygon', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = f'{self.plugin_dir}/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&MergePolygon'),
                action)
            self.iface.removeToolBarIcon(action)

    
    def Upload_Point_Layer1(self):
        filename, _filter = QFileDialog.getOpenFileName(
        self.dlg, "Select Input text file ","", '*.shp')
        self.dlg.inputlineEdit.setText(filename)

         #################################################  changing datatype #####################################################

        gdf = gpd.read_file(filename)

        # Change the data type of a column
        gdf['ID1'] = gdf['ID1'].astype(str)

        # Write the updated GeoDataFrame to a new shapefile
        gdf.to_file(filename)
        

        # create the polygon layer

        QgsProject.instance().clear()
        filename = self.dlg.inputlineEdit.text()
        orignalfile = QgsVectorLayer(filename, "polygon", "ogr")
        QgsProject.instance().addMapLayer(orignalfile)
        layer = iface.activeLayer()

        vlayer=iface.activeLayer()
        vlayer.selectAll()
        mCanvas = iface.mapCanvas()
        mCanvas.zoomToSelected()
        vlayer.removeSelection()

        # Display plot Ids on the polygon layer- Label 

        for layer in QgsProject.instance().mapLayers().values():
            layer_settings  = QgsPalLayerSettings()
            layer_settings.fieldName = "ID1"
            layer_settings.enabled = True
            layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
            layer.setLabelsEnabled(True)
            layer.setLabeling(layer_settings)
            layer.triggerRepaint()
        
        # adding plot No. to dropdown list
        idx = layer.dataProvider().fieldNameIndex( 'ID1' ) 
        uv = layer.dataProvider().uniqueValues( idx )
        uv1=[str(x) for x in uv]
        uv1.sort()
        self.dlg.plot1comboBox.addItems(uv1)
        self.dlg.plot2comboBox.addItems(uv1)

    def Upload_Point_Layer2(self):
        global q1,q2,gid1,gid2
        q1=self.dlg.plot1comboBox.currentText()        
        q2=self.dlg.plot2comboBox.currentText()        
        filename = self.dlg.inputlineEdit.text()

        layerList = QgsProject.instance().mapLayersByName("polygon")
        layer=layerList[0]
        gdf = gpd.read_file(filename)
        features = layer.getFeatures()
        plot=0
        global gid1,gid2
        for feat in features:
            print(feat)
            if(q1==feat['ID1']):  
                print(q1)  
                print("feat['ID1']")
                print(feat['ID1'])   
                gid1=feat.id()                
                mypolygon1=gdf.loc[gid1,'geometry']     

            
            if(q2==feat['ID1']):
                print(q2)  
                print("feat['ID1']")
                print(feat['ID1']) 
                gid2=feat.id()     
                mypolygon2=gdf.loc[gid2,'geometry']     
            plot+=1


        ver1=list(mypolygon1.exterior.coords)
        ver2=list(mypolygon2.exterior.coords)

        ###################################################################################################################################

        layer=QgsVectorLayer('Point?crs=EPSG:32645','point1','memory')
        provider=layer.dataProvider()
        layer.updateFields()
        f=QgsFeature()
        for i in range(len(mypolygon1.exterior.coords)):
            p1=QgsPointXY(ver1[i][0],ver1[i][1])
            f.setGeometry(QgsGeometry.fromPointXY(p1))
            provider.addFeature(f)
        layer.updateExtents()
        QgsProject.instance().addMapLayer(layer)

        layer=QgsVectorLayer('Point?crs=EPSG:32645','point2','memory')
        provider=layer.dataProvider()
        layer.updateFields()
        f=QgsFeature()
        for i in range(len(mypolygon2.exterior.coords)):
            p1=QgsPointXY(ver2[i][0],ver2[i][1])
            f.setGeometry(QgsGeometry.fromPointXY(p1))
            provider.addFeature(f)
        layer.updateExtents()
        QgsProject.instance().addMapLayer(layer)

        merged_poly = mypolygon1.union(mypolygon2)
        global flag1
        flag1=0

        try:
            coordinates = list(merged_poly.exterior.coords)
            global merpolygon
            merpolygon = Polygon(coordinates)

            # Convert the Shapely Polygon to a list of QgsPointXY objects
            qgs_points = [QgsPointXY(coord[0], coord[1]) for coord in list(merpolygon.exterior.coords)]

            # Create a QgsGeometry object from the list of QgsPointXY objects
            global qgs_geometry
            qgs_geometry = QgsGeometry.fromPolygonXY([qgs_points])
            print("qgs_geometry")
            print(qgs_geometry)
            layer =  QgsVectorLayer('Polygon?crs=EPSG:32645', 'merged plot' , "memory")
            pr = layer.dataProvider() 
            pr.addAttributes([QgsField('ID1',QVariant.String)])
            pr.addAttributes([QgsField('xCentroid',QVariant.String)])
            pr.addAttributes([QgsField('yCentroid',QVariant.String)])
            pr.addAttributes([QgsField("Latitude",QVariant.String)])
            pr.addAttributes([QgsField("Longitude",QVariant.String)])
            pr.addAttributes([QgsField("unique id",QVariant.String)])
            pr.addAttributes([QgsField('polygon',QVariant.String)])
            layer.updateFields()
            poly = QgsFeature()
            c1=list(merged_poly.centroid.coords)
            h1=utm.to_latlon(c1[0][0], c1[0][1], 45, 'N')
            code1=pniUgenerator(h1[0],h1[1],0)
            poly.setAttributes([(str(plot+1)),str(c1[0][0]),str(c1[0][1]),str(h1[0]),str(h1[1]),str(code1),str(merged_poly)])
            poly.setGeometry(qgs_geometry)
            pr.addFeatures([poly])
            layer.updateExtents()
            QgsProject.instance().addMapLayer(layer)


            print("creating centroid layer for polygons" )
            layer=QgsVectorLayer('Point?crs=EPSG:32645','polycentroid','memory')
            provider=layer.dataProvider()
            provider.addAttributes([QgsField('id2',QVariant.String)])
            provider.addAttributes([QgsField('xCentroid',QVariant.String)])
            provider.addAttributes([QgsField('yCentroid',QVariant.String)])
            layer.updateFields()
            f=QgsFeature()
            p1=QgsPointXY(c1[0][0],c1[0][1])
            f.setGeometry(QgsGeometry.fromPointXY(p1))
            f.setAttributes([(str(plot+1)),str(c1[0][0]),str(c1[0][1])])
            provider.addFeature(f)
            provider.addFeature(f)
            layer.updateExtents()
            QgsProject.instance().addMapLayer(layer)
            
        except:
            print("choose plots adjacent to each other")
            flag1=-1
        
   



    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = MergePolygonDialog()
            self.dlg.inputpushButton.clicked.connect(self.Upload_Point_Layer1)
            self.dlg.confirmpushButton.clicked.connect(self.Upload_Point_Layer2)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            
            if(flag1==0):
                print("hello")
                
                # plotid=self.dlg.selectComboBox.currentText()
                layerList = QgsProject.instance().mapLayersByName("polygon")
                layer=layerList[0]
                            
                idx = layer.dataProvider().fieldNameIndex( 'ID1' ) 
                uv = layer.dataProvider().uniqueValues( idx )
                print(len(uv))
                plotid=str(q1+"_"+q2)

                
                fields = layer.fields()
                x=0
                l=[]
                for field in fields:
                    if(field.name()!='ID1'):
                        l.append(str(field.name()))
                        x+=1
                    else:
                        id=x
                l.insert(id,'ID1')
                
                # id2=self.dlg.ComboBox.currentText()
                # id1=int(id2)-1
                id1=len(uv)-1
                filename = self.dlg.inputlineEdit.text()

                filepath = os.path.splitext(os.path.basename(filename))[0]

                # extract the substring after the first underscore
                substring= filepath.split("F_")[1]
                tblname='"F_'+substring+'"'

                print(tblname)

                gdf = gpd.read_file(filename)
                features = layer.getFeatures()
                print(l)
                for feat in features:
                    if(int(id1)==feat.id()):                
                        mypolygon=gdf.loc[int(id1),'geometry']                
                        break
                print(type(mypolygon))
                print(merpolygon)
                print(type(merpolygon))
                multipolygon = MultiPolygon([merpolygon])
                #ver=list(mypolygon.exterior.coords)

                
                
                
                ##################################################################
                
                print(layer)
                # with fiona.open(filename) as layer:
                #     fields = layer.schema['properties']
                #     for field_name, field_type in fields.items():
                #         print(f"{field_name}: {field_type}")
                #         data_type = field_type.split(':')[0]
                #         t.append(data_type)
                
                # print(t)
                ###########################################################################################################################3

                layer =  QgsVectorLayer('Polygon?crs=EPSG:32645', 'merged plot2' , "memory")
                pr = layer.dataProvider() 
                poly = QgsFeature()
                poly.setGeometry(qgs_geometry)
                pr.addFeatures([poly])
                layer.updateExtents()
                QgsProject.instance().addMapLayer(layer)

                #################################################### add row ########################################################################

                
                # print("attr_values")
                # print(type(attr_values))
                # print(attr_values)
                # layerList = QgsProject.instance().mapLayersByName("polygon")
                # layer=layerList[0]
                # pr = layer.dataProvider() 
                # c=[160,161]
                # pr.deleteAttributes(c)
                # layer.updateFields()

            
                layerList = QgsProject.instance().mapLayersByName("polygon")
                layer=layerList[0]
                l1=[]
                field_names = [field.name() for field in layer.fields()]
                i=1
                for field in field_names:
                    
                    if(field=='ID1'):
                        l1.append(plotid)
                    else:
                        l1.append(0)
                        

                print(l1)
                pr = layer.dataProvider() 
                print("attr_values")
                print(l1)
                poly = QgsFeature()
                poly.setGeometry(qgs_geometry)
                poly.setAttributes(l1)
                pr.addFeatures([poly])
                
                layer.updateExtents()
                QgsProject.instance().addMapLayer(layer)

                
                layer.updateFields()


                ######################################### Delete row #########################################################################
                
                
               

                layers=QgsProject.instance().mapLayersByName('polygon')
                layer=layers[0]
                caps=layer.dataProvider().capabilities()
                
                dfeats=[]
                selection = layer.selectedFeatures()
                # creating point layer for selected plot
                for feat in selection:
                    id=feat.id()
                    layer.deselect(id)

                if caps & QgsVectorDataProvider.DeleteFeatures:
                    
                    dfeats.append(gid1)
                    dfeats.append(gid2)
                    res=layer.dataProvider().deleteFeatures(dfeats)

                



                ################################ displaying f_80 finally ###################################################################

                orignalfile = QgsVectorLayer(filename, "final shp", "ogr")
                QgsProject.instance().addMapLayer(orignalfile)
                layer = iface.activeLayer()

                vlayer=iface.activeLayer()
                vlayer.selectAll()
                mCanvas = iface.mapCanvas()
                mCanvas.zoomToSelected()
                vlayer.removeSelection()

                # Display plot Ids on the polygon layer- Label 

                for layer in QgsProject.instance().mapLayers().values():
                    layer_settings  = QgsPalLayerSettings()
                    layer_settings.fieldName = "ID1"
                    layer_settings.enabled = True
                    layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                    layer.setLabelsEnabled(True)
                    layer.setLabeling(layer_settings)
                    layer.triggerRepaint()


                ##############################################################################################################################

                ###################################### ADDING ATTRIBUTES TO THE FILE ########################################################

                ###############################################################################################################################

                 ############################################ ADDING OTHER ATTRIBUTE VALUES ########################################
                xc=[]
                yc=[]
                lat=[]
                lon=[]
                c1=[]
                g=[]
                gdf = gpd.read_file(filename)
                layer_provider=layer.dataProvider()
                abc=layer.fields().names()
                l=len(abc)
                a=abc.count('Xcentroid')

                flag=0
                features = layer.getFeatures()
                for feat in features:
                    id=feat.id()
                    mypolygon=gdf.loc[id,'geometry']
                    try:
                        c=list(mypolygon.centroid.coords)
                    except:
                        flag+=1
                    g.append(mypolygon)
                    xc.append(c[0][0])
                    yc.append(c[0][1])

                if a==0 :
                    layer_provider.addAttributes([QgsField("Xcentroid",QVariant.String)])
                    layer_provider.addAttributes([QgsField("Ycentroid",QVariant.String)])
                    layer_provider.addAttributes([QgsField("Latitude",QVariant.String)])
                    layer_provider.addAttributes([QgsField("Longitude",QVariant.String)])
                    layer_provider.addAttributes([QgsField("unique id",QVariant.String)])
                    layer_provider.addAttributes([QgsField("Multipolygon",QVariant.String)])
                    g=[]
                    layer.updateFields()
                    layer.startEditing()
                    features = layer.getFeatures()
                    
                    for feat in features:
                        id=feat.id()
                        mypolygon=gdf.loc[id,'geometry']
                        try:
                            c=list(mypolygon.centroid.coords)
                        except:
                            flag+=1
                        a1={l:str(c[0][0])}
                        a2={l+1:str(c[0][1])}
                        g.append(mypolygon)
                        xc.append(c[0][0])
                        yc.append(c[0][1])
                        layer_provider.changeAttributeValues({id:a1})
                        layer_provider.changeAttributeValues({id:a2})
                        h=utm.to_latlon(xc[id], yc[id], 45, 'N')
                        lat.append(h[0])
                        lon.append(h[1])
                        code=pniUgenerator(h[0],h[1],0)
                        c1.append(code)
                        lat1=str(lat[id])
                        a3={l+2:lat1}
                        lon1=str(lon[id])
                        a4={l+3:lon1}
                        a5={l+4:c1[id]}
                        a6={l+5:str(gdf.loc[id,'geometry'])}
                        layer_provider.changeAttributeValues({id:a3})
                        layer_provider.changeAttributeValues({id:a4})
                        layer_provider.changeAttributeValues({id:a5})
                        layer_provider.changeAttributeValues({id:a6})
                        
                    layer.commitChanges()  
                else:
                    l=abc.index('Xcentroid')
                    
                    layer.updateFields()
                    layer.startEditing()
                    features = layer.getFeatures()
                    for feat in features:
                        if(feat['ID1']==plotid):
                            id=feat.id()
                            mypolygon=gdf.loc[id,'geometry']
                            try:
                                c=list(mypolygon.centroid.coords)
                            except:
                                flag+=1
                            a1={l:str(c[0][0])}
                            a2={l+1:str(c[0][1])}
                            g.append(mypolygon)
                            xc.append(c[0][0])
                            yc.append(c[0][1])
                            layer_provider.changeAttributeValues({id:a1})
                            layer_provider.changeAttributeValues({id:a2})
                            h=utm.to_latlon(xc[id], yc[id], 45, 'N')
                            lat.append(h[0])
                            lon.append(h[1])
                            code=pniUgenerator(h[0],h[1],0)
                            c1.append(code)
                            lat1=str(lat[0])
                            a3={l+2:lat1}
                            lon1=str(lon[0])
                            a4={l+3:lon1}
                            a5={l+4:c1[0]}
                            a6={l+5:str(gdf.loc[id,'geometry'])}
                            layer_provider.changeAttributeValues({id:a3})
                            layer_provider.changeAttributeValues({id:a4})
                            layer_provider.changeAttributeValues({id:a5})
                            layer_provider.changeAttributeValues({id:a6})
                            layer.commitChanges()
                        
            

            else: 
                print("Merging is not performed")
           

            




def dec_to_base(num,base):  
    base_num = ""
    while num>0:
        dig = int(num%base)
        if dig<10:
            base_num += str(dig)
        else:
            base_num += chr(ord('A')+dig-10) 
        num //= base
    base_num = base_num[::-1]  
    return base_num
    
def pniUgenerator(latitude,longitude,f):
  lat = str(latitude)
  splitLat = lat.split(".")
  splitLat[0] = splitLat[0].ljust( 2, "0")
  splitLat[1] = splitLat[1].rjust(6, "0")
  lat1 = int(splitLat[0])
  lat1 += 90
  lat1= dec_to_base(lat1,14)
  slat1 = (str(lat1)).upper()
  slat1=slat1.ljust(2,"0")
  slat1 = slat1.replace("I", "Y")
  slat1 = slat1.replace("O", "Z")
  lat2 = int(splitLat[1][:3])
  lat2=dec_to_base(lat2,32)
  slat2 =(str(lat2)).upper()
  slat2=slat2.ljust(2,"0")
  slat2 = slat2.replace("I", "Y")
  slat2 = slat2.replace("O", "Z")
  lat3 = int(splitLat[1][3:6])
  lat3=dec_to_base(lat3,32)
  slat3 = (str(lat3)).upper()
  slat3=slat3.ljust(2,"0")
  slat3 = slat3.replace("I", "Y")
  slat3 = slat3.replace("O", "Z")
  lon=str(longitude)
  splitLon=lon.split(".")
  splitLon[0] = splitLon[0].ljust( 2, "0")
  splitLon[1] =splitLon[1].rjust( 6, "0")
  lon1 = int(splitLon[0])
  lon1 += 180
  lon1=dec_to_base(lon1,19)
  slon1 = (str(lon1)).upper()
  slon1 = slon1.replace("I", "Y")
  slon1 = slon1.replace("O", "Z")
  lon2 = int(splitLon[1][0:3])
  lon2 = dec_to_base(lon2, 32)
  slon2=(str(lon2)).upper()
  slon2=slon2.ljust(2,"0")
  slon2 = slon2.replace("I", "Y")
  slon2 = slon2.replace("O", "Z")
  lon3 = int(splitLon[1][3:6])
  lon3=dec_to_base(lon3,32)
  slon3 = (str(lon3)).upper()
  slon3 = slon3.ljust(2,"0")
  slon3 = slon3.replace("I", "Y")
  slon3 = slon3.replace("O", "Z")
  f1 = f + 578
  f1 = dec_to_base(f1, 34)
  f2= (str(f1)).upper()
  f2 =f2.ljust(2,"0")
  f2 = f2.replace("I", "Y")
  f2 = f2.replace("O", "Z")
  pniU=slat1+slat2+slat3+"-"+slon1+slon2+slon3+"-"+f2
  return(pniU)
