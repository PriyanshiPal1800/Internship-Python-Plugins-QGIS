# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GP
                                 A QGIS plugin
 CREATING GENERAL PLUGIN FOR ALL FILES
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-02-19
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Priyanshi Pal
        email                : priyakusum2000@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication,QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction,QFileDialog
from qgis.core import QgsVectorLayer, QgsProject,QgsField,QgsFeature
from qgis.utils import iface
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .GP_dialog import GPDialog
import os.path
import geopandas as gpd
import processing
import features
import csv
import shapely.wkt
import utm


class GP:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'GP_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&GP')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('GP', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/GP/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&GP'),
                action)
            self.iface.removeToolBarIcon(action)
    
    def Upload_Point_Layer1(self):
        filename, _filter = QFileDialog.getOpenFileName(
        self.dlg, "Select Input text file ","", '*.shp')
        self.dlg.inputlineEdit.setText(filename)

    def Upload_Point_Layer2(self):
        filename, _filter = QFileDialog.getSaveFileName(
        self.dlg, "Select output text file ","", '*.csv')
        self.dlg.csvlineEdit.setText(filename)

    def Upload_Point_Layer3(self):
        filename, _filter = QFileDialog.getSaveFileName(
        self.dlg, "Select output text file ","", '*.kml')
        self.dlg.kmllineEdit.setText(filename)
    
    def Upload_Point_Layer4(self):
        filename, _filter = QFileDialog.getSaveFileName(
        self.dlg, "Select output text file ","", '*.kml')
        self.dlg.pointlineEdit.setText(filename)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = GPDialog()
            self.dlg.inputpushButton.clicked.connect(self.Upload_Point_Layer1)
            self.dlg.csvpushButton.clicked.connect(self.Upload_Point_Layer2)
            self.dlg.kmlpushButton.clicked.connect(self.Upload_Point_Layer3)
            self.dlg.pointpushButton.clicked.connect(self.Upload_Point_Layer4)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            #Creating the polygon layer

            QgsProject.instance().clear()
            filename = self.dlg.inputlineEdit.text()
            orignalfile = QgsVectorLayer(filename, "polygon", "ogr")
            QgsProject.instance().addMapLayer(orignalfile)
            layer = iface.activeLayer()

            #EXTRACT MULTIPOLYGON COORDINATES
            xc=[]
            yc=[]
            g=[]
            p=[]
            gdf = gpd.read_file(filename)
            outputpath = self.dlg.csvlineEdit.text()
            

            layer_provider=layer.dataProvider()
            abc=layer.fields().names()
            l=len(abc)
            a=abc.count('Xcentroid')

            flag=0
            features = layer.getFeatures()
            for feat in features:
                id=feat.id()
                mypolygon=gdf.loc[id,'geometry']
                try:
                    c=list(mypolygon.centroid.coords)
                except:
                    flag+=1
                g.append(mypolygon)
                xc.append(c[0][0])
                yc.append(c[0][1])

            if a==0 :
                layer_provider.addAttributes([QgsField("Xcentroid",QVariant.String)])
                layer_provider.addAttributes([QgsField("Ycentroid",QVariant.String)])
                g=[]
                layer.updateFields()
                layer.startEditing()
                features = layer.getFeatures()
                
                for feat in features:
                    id=feat.id()
                    mypolygon=gdf.loc[id,'geometry']
                    try:
                        c=list(mypolygon.centroid.coords)
                    except:
                        flag+=1
                    a1={l:str(c[0][0])}
                    a2={l+1:str(c[0][1])}
                    g.append(mypolygon)
                    xc.append(c[0][0])
                    yc.append(c[0][1])
                    layer_provider.changeAttributeValues({id:a1})
                    layer_provider.changeAttributeValues({id:a2})
                    
            layer.commitChanges()
            header=layer.fields().names()
            a=len(header) 
            # Display points of currently selected layer in point form 

            print("creating output layer")
            params={'INPUT': layer,'ALL_pARTS':False,'OUTPUT':'memory:'}
            newLayer=processing.run("native:pointonsurface",params)
            layerOutput=newLayer["OUTPUT"]
            QgsProject.instance().addMapLayer(layerOutput)

            #calculating Lat,Long,Unique point, geometry and adding to csv file 

            lat=[]
            lon=[]
            c1=[]
            # Writing into csv file
            header=layer.fields().names()
            
            k=abc.count('Latitude')
            if k==0:
                header.append('Latitude')
                header.append('Longitude')
                header.append('Unique point')
                header.append('Geometry')
            print(header)
            a=len(header) 
            a=a-6
            with open(outputpath, 'w', encoding='UTF8', newline='') as f:
                writer = csv.writer(f)
                writer.writerow(header)
                features = layer.getFeatures()
                for feat in features:
                    id=feat.id()
                    h=utm.to_latlon(xc[id], yc[id], 45, 'N')
                    lat.append(h[0])
                    lon.append(h[1])
                    code=pniUgenerator(h[0],h[1],0)
                    c1.append(code)
                    l=[]
                    for i in range(a):
                        p=gdf.loc[id,header[i]]
                        l.append(p)
                    l.append(xc[id])
                    l.append(yc[id])
                    l.append(h[0])
                    l.append(h[1])
                    l.append(code)
                    l.append(g[id])
                    writer.writerow(l)

            # Include Latitude logitude unique point and geometry in attribute table
            
            header=layer.fields().names()
            hl=len(header)
            hl=hl
            k=abc.count('Latitude')
            if k==0:
                layer_provider.addAttributes([QgsField("Latitude",QVariant.String)])
                layer_provider.addAttributes([QgsField("Longitude",QVariant.String)])
                layer_provider.addAttributes([QgsField("unique id",QVariant.String)])
                layer_provider.addAttributes([QgsField("Multipolygon",QVariant.String)])
                

                # Add values in attribute column
                layer.updateFields()
                layer.startEditing()
                features = layer.getFeatures()
                for feat in features:
                    id=feat.id()
                    lat1=str(lat[id])
                    a1={hl:lat1}
                    lon1=str(lon[id])
                    a2={hl+1:lon1}
                    a3={hl+2:c1[id]}
                    a4={hl+3:str(gdf.loc[id,'geometry'])}
                    layer_provider.changeAttributeValues({id:a1})
                    layer_provider.changeAttributeValues({id:a2})
                    layer_provider.changeAttributeValues({id:a3})
                    layer_provider.changeAttributeValues({id:a4})
            layer.commitChanges()

            # CREATING THE KML FILE
            fname=outputpath
            print(outputpath)
            header=layer.fields().names()
            data = csv.reader(open(fname), delimiter = ',')
            #Skip the 1st header row.
            next(data,None)
            #Open the file to be written.
            f = open(self.dlg.kmllineEdit.text(), 'w')

            #Writing the kml file.
            hlen=len(header)
            f.write("<?xml version='1.0' encoding='UTF-8'?>\n")
            f.write("<kml xmlns='http://earth.google.com/kml/2.1'>\n")
            f.write("<Document>\n")
            f.write("   <name>" + self.dlg.kmllineEdit.text() + '.kml' +"</name>\n")
            f.write("   <Schema id="+"'temp'"+">\n")
            for i in range(hlen):
                f.write("       <SimpleField name="+"'"+header[i]+"' type="+"'string'"+" />\n")

            f.write("   </Schema>\n")
            f.write("   <gx:CascadingStyle kml:id="+"'P1'"+">\n")
            f.write("       <Style>\n")
            f.write("           <IconStyle>\n")
            f.write("               <scale>1.44</scale>\n")
            f.write("               <Icon>\n")
            f.write("                    <href>https://maps.google.com/mapfiles/kml/pushpin/ylw-pushpin.png</href>\n")
            f.write("               </Icon>\n")
            f.write("           </IconStyle>\n")
            f.write("           <LabelStyle>\n")
            f.write("           </LabelStyle>\n")
            f.write("           <LineStyle>\n")
            f.write("               <color>ff2f2fd3</color>\n")
            f.write("               <width>1.5</width>\n")
            f.write("           </LineStyle>\n")
            f.write("           <PolyStyle>\n")
            f.write("               <color>00ffffff</color>\n")
            f.write("           </PolyStyle>\n")
            f.write("           <BalloonStyle>\n")
            f.write("           </BalloonStyle>\n")
            f.write("       </Style>\n")
            f.write("   </gx:CascadingStyle>\n")
            f.write("   <gx:CascadingStyle kml:id="+"'P2'"+">\n")
            f.write("       <Style>\n")
            f.write("           <IconStyle>\n")
            f.write("               <scale>1.2</scale>\n")
            f.write("               <Icon>\n")
            f.write("                    <href>https://maps.google.com/mapfiles/kml/pushpin/ylw-pushpin.png</href>\n")
            f.write("               </Icon>\n")
            f.write("               <hotSpot x="+"'64'"+" y="+"'128'"+" xunits="+"'pixels'"+" yunits="+"'insetPixels'"+"/>\n")
            f.write("           </IconStyle>\n")
            f.write("           <LabelStyle>\n")
            f.write("           </LabelStyle>\n")
            f.write("           <LineStyle>\n")
            f.write("               <color>ff2f2fd3</color>\n")
            f.write("           </LineStyle>\n")
            f.write("           <PolyStyle>\n")
            f.write("               <color>10ffffff</color>\n")
            f.write("           </PolyStyle>\n")
            f.write("           <BalloonStyle>\n")
            f.write("           </BalloonStyle>\n")
            f.write("       </Style>\n")
            f.write("   </gx:CascadingStyle>\n")
            f.write("   <StyleMap id="+"'P3'"+">\n")
            f.write("       <Pair>\n")
            f.write("           <key>normal</key>\n")
            f.write("           <styleUrl>#P2</styleUrl>\n")
            f.write("       </Pair>   \n")
            f.write("       <Pair>\n")
            f.write("           <key>highlight</key>\n")
            f.write("           <styleUrl>#P1</styleUrl>\n")
            f.write("       </Pair>   \n")
            f.write("   </StyleMap>\n")
            i=0
            for row in data:
                hlen=len(header)
                hgeo=hlen-1
                shapelyObject = shapely.wkt.loads(str(row[hgeo]))
                c2=''
                coo = list(shapelyObject.exterior.coords)
                l=len(coo)
                for j in range(l):
                    h=utm.to_latlon(coo[j][0], coo[j][1], 45, 'N')
                    c2+=str(h[1])
                    c2+=","
                    c2+=str(h[0])
                    c2+=",10 "
                f.write("   <Placemark>\n")
                f.write("       <styleUrl>#P3</styleUrl>\n")
                f.write("       <ExtendedData>\n")
                f.write("           <SchemaData schemaUrl="+"'#temp'"+">\n")
                for j in range(hlen):
                    f.write("               <SimpleData name="+"'"+str(header[j])+"'>"+str(row[j])+"</SimpleData>\n")
                f.write("           </SchemaData>\n")
                f.write("       </ExtendedData>\n")
                f.write("       <name>" + str(row[hlen-2]) + "</name>\n")
                f.write("       <view>\n")
                f.write("           <Latitude>"+ str(row[hlen-4]) + "</Latitude>\n")
                f.write("           <Longitude>"+ str(row[hlen-3]) + "</Longitude>\n")
                f.write("       </view>\n")
                
                f.write("       <Polygon>\n")
                f.write("           <extrude>1</extrude>\n")
                f.write("           <altitudeMode>relativeToGround</altitudeMode>\n")
                f.write("           <outerBoundaryIs>\n")
                f.write("               <LinearRing>\n")
                f.write("                   <coordinates>\n")
                f.write("                       "+ str(c2) +"\n")
                f.write("                   </coordinates>\n")
                f.write("               </LinearRing>\n")
                f.write("           </outerBoundaryIs>\n")
                f.write("       </Polygon>\n")
                f.write("   </Placemark>\n")
                i=i+1
                
            f.write("</Document>\n")
            f.write("</kml>\n")
            print ("Kml File Created. ")
            f.close()

            # CREATING POINT KML FILE
            
            
            #Skip the 1st header row.
            next(data,None)
            #Open the file to be written.
            f = open(self.dlg.pointlineEdit.text(), 'w')

            #Writing the kml file.
            hlen=len(header)
            f.write("<?xml version='1.0' encoding='UTF-8'?>\n")
            f.write("<kml xmlns='http://earth.google.com/kml/2.1'>\n")
            f.write("<Document>\n")
            f.write("   <name>" + self.dlg.pointlineEdit.text() + '.kml' +"</name>\n")
            f.write("   <Schema id="+"'temp'"+">\n")
            for i in range(hlen):
                f.write("       <SimpleField name="+"'"+header[i]+"' type="+"'string'"+" />\n")

            f.write("   </Schema>\n")
            
            i=0
            for row in data:
                hlen=len(header)
                hgeo=hlen-1
                shapelyObject = shapely.wkt.loads(str(row[hgeo]))
                c2=''
                coo = list(shapelyObject.exterior.coords)
                l=len(coo)
                for j in range(l):
                    h=utm.to_latlon(coo[j][0], coo[j][1], 45, 'N')
                    c2+=str(h[1])
                    c2+=","
                    c2+=str(h[0])
                    c2+=",10 "
                f.write("   <Placemark>\n")
                f.write("       <styleUrl>#P3</styleUrl>\n")
                f.write("       <ExtendedData>\n")
                f.write("           <SchemaData schemaUrl="+"'#temp'"+">\n")
                for j in range(hlen):
                    f.write("               <SimpleData name="+"'"+str(header[j])+"'>"+str(row[j])+"</SimpleData>\n")
                f.write("           </SchemaData>\n")
                f.write("       </ExtendedData>\n")
                f.write("       <name>" + str(row[hlen-2]) + "</name>\n")
                f.write("       <view>\n")
                f.write("           <Latitude>"+ str(row[hlen-4]) + "</Latitude>\n")
                f.write("           <Longitude>"+ str(row[hlen-3]) + "</Longitude>\n")
                f.write("       </view>\n")
                f.write("       <Point>\n")
                f.write("           <coordinates>" + str(row[hlen-3]) + "," + str(row[hlen-4]) + "," + str() + "</coordinates>\n")
                f.write("       </Point>\n")
                f.write("   </Placemark>\n")
                i=i+1
                
            f.write("</Document>\n")
            f.write("</kml>\n")
            print ("Kml File Created. ")
            f.close()


def dec_to_base(num,base):  
    base_num = ""
    while num>0:
        dig = int(num%base)
        if dig<10:
            base_num += str(dig)
        else:
            base_num += chr(ord('A')+dig-10) 
        num //= base
    base_num = base_num[::-1]  
    return base_num
    
def pniUgenerator(latitude,longitude,f):
  lat = str(latitude)
  splitLat = lat.split(".")
  splitLat[0] = splitLat[0].ljust( 2, "0")
  splitLat[1] = splitLat[1].rjust(6, "0")
  lat1 = int(splitLat[0])
  lat1 += 90
  lat1= dec_to_base(lat1,14)
  slat1 = (str(lat1)).upper()
  slat1=slat1.ljust(2,"0")
  slat1 = slat1.replace("I", "Y")
  slat1 = slat1.replace("O", "Z")
  lat2 = int(splitLat[1][:3])
  lat2=dec_to_base(lat2,32)
  slat2 =(str(lat2)).upper()
  slat2=slat2.ljust(2,"0")
  slat2 = slat2.replace("I", "Y")
  slat2 = slat2.replace("O", "Z")
  lat3 = int(splitLat[1][3:6])
  lat3=dec_to_base(lat3,32)
  slat3 = (str(lat3)).upper()
  slat3=slat3.ljust(2,"0")
  slat3 = slat3.replace("I", "Y")
  slat3 = slat3.replace("O", "Z")
  lon=str(longitude)
  splitLon=lon.split(".")
  splitLon[0] = splitLon[0].ljust( 2, "0")
  splitLon[1] =splitLon[1].rjust( 6, "0")
  lon1 = int(splitLon[0])
  lon1 += 180
  lon1=dec_to_base(lon1,19)
  slon1 = (str(lon1)).upper()
  slon1 = slon1.replace("I", "Y")
  slon1 = slon1.replace("O", "Z")
  lon2 = int(splitLon[1][0:3])
  lon2 = dec_to_base(lon2, 32)
  slon2=(str(lon2)).upper()
  slon2=slon2.ljust(2,"0")
  slon2 = slon2.replace("I", "Y")
  slon2 = slon2.replace("O", "Z")
  lon3 = int(splitLon[1][3:6])
  lon3=dec_to_base(lon3,32)
  slon3 = (str(lon3)).upper()
  slon3 = slon3.ljust(2,"0")
  slon3 = slon3.replace("I", "Y")
  slon3 = slon3.replace("O", "Z")
  f1 = f + 578
  f1 = dec_to_base(f1, 34)
  f2= (str(f1)).upper()
  f2 =f2.ljust(2,"0")
  f2 = f2.replace("I", "Y")
  f2 = f2.replace("O", "Z")
  pniU=slat1+slat2+slat3+"-"+slon1+slon2+slon3+"-"+f2
  return(pniU)
            