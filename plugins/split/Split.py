# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Split
                                 A QGIS plugin
 Plugin to divide the plot
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-04-08
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Priyanshi Pal
        email                : priyakusum2000@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication,QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction,QFileDialog
from qgis.utils import iface
from qgis.core import QgsVectorLayer,QgsPalLayerSettings,QgsVectorLayerSimpleLabeling,QgsProject,QgsField,QgsFeature,QgsGeometry,QgsPointXY,QgsVectorDataProvider

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .Split_dialog import SplitDialog
import os.path
import utm
import geopandas as gpd
import shapely
from shapely import geometry
from datetime import date

class Split:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Split_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Split')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Split', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = f'{self.plugin_dir}/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Split'),
                action)
            self.iface.removeToolBarIcon(action)

    def Upload_Point_Layer1(self):
        global filename
        filename, _filter = QFileDialog.getOpenFileName(
        self.dlg, "Select Input text file ","", '*.shp')
        self.dlg.inputlineEdit.setText(filename)

        #################################################  changing datatype #####################################################

        gdf = gpd.read_file(filename)

        # Change the data type of a column
        gdf['ID1'] = gdf['ID1'].astype(str)

        # Write the updated GeoDataFrame to a new shapefile
        gdf.to_file(filename)
        

        # create the polygon layer

        QgsProject.instance().clear()
        filename = self.dlg.inputlineEdit.text()
        orignalfile = QgsVectorLayer(filename, "polygon", "ogr")
        QgsProject.instance().addMapLayer(orignalfile)
        layer = iface.activeLayer()

        vlayer=iface.activeLayer()
        vlayer.selectAll()
        mCanvas = iface.mapCanvas()
        mCanvas.zoomToSelected()
        vlayer.removeSelection()

        # Display plot Ids on the polygon layer- Label 

        for layer in QgsProject.instance().mapLayers().values():
            layer_settings  = QgsPalLayerSettings()
            layer_settings.fieldName = "ID1"
            layer_settings.enabled = True
            layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
            layer.setLabelsEnabled(True)
            layer.setLabeling(layer_settings)
            layer.triggerRepaint()

        # adding plot No. to dropdown list
        idx = layer.dataProvider().fieldNameIndex( 'ID1' ) 
        uv = layer.dataProvider().uniqueValues( idx )
        
        uv1=[str(x) for x in uv]
        uv1.sort()
        self.dlg.selectComboBox.addItems(uv1)
        
    def Upload_Point_Layer2(self):

        layerList = QgsProject.instance().mapLayersByName("polygon")
        layer=layerList[0]
        selection = layer.selectedFeatures()
        # creating point layer for selected plot
        for feat in selection:
            id=feat.id()
            layer.deselect(id)
            layerList = QgsProject.instance().mapLayersByName("point")
            layer=layerList[0]
            QgsProject.instance().removeMapLayer(layer)

            layerList = QgsProject.instance().mapLayersByName("polygon")
            layer=layerList[0]
            for layer in QgsProject.instance().mapLayers().values():
                layer_settings  = QgsPalLayerSettings()
                layer_settings.fieldName = "ID1"
                layer_settings.enabled = True
                layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
                layer.setLabelsEnabled(True)
                layer.setLabeling(layer_settings)
                layer.triggerRepaint()
            
            self.dlg.firstcomboBox.clear()
            self.dlg.secondcomboBox.clear()

        id2=self.dlg.selectComboBox.currentText()
        global filepath
        filename = self.dlg.inputlineEdit.text()
        filepath = os.path.splitext(os.path.basename(filename))[0]

        
        gdf = gpd.read_file(filename)
        features = layer.getFeatures()
        # getting the points from polygon layer for selected plot
            
        layer=iface.activeLayer() 
        ver=[]
        gdf = gpd.read_file(filename)
        features = layer.getFeatures()
        global id1
        for feat in features:
            if(feat['ID1']==id2):
                id1=feat.id()                
                mypolygon=gdf.loc[int(id1),'geometry']                
                break
        layer.select(int(id1))
        ver=list(mypolygon.exterior.coords)
        
        # creating the points layer
        layer=QgsVectorLayer('Point?crs=EPSG:32645','point','memory')
        provider=layer.dataProvider()
        provider.addAttributes([QgsField('id2',QVariant.Int)])
        provider.addAttributes([QgsField('xCord',QVariant.String)])
        provider.addAttributes([QgsField('yCord',QVariant.String)])
        layer.updateFields()
        f=QgsFeature()
        for i in range(len(mypolygon.exterior.coords)):
            p1=QgsPointXY(ver[i][0],ver[i][1])
            f.setGeometry(QgsGeometry.fromPointXY(p1))
            f.setAttributes([i+1,str(ver[i][0]),str(ver[i][1])])
            provider.addFeature(f)
        layer.updateExtents()
        QgsProject.instance().addMapLayer(layer)

        vlayer=iface.activeLayer()
        vlayer.selectAll()
        mCanvas = iface.mapCanvas()
        mCanvas.zoomToSelected()
        vlayer.removeSelection()


        layer = iface.activeLayer()
        idx = layer.dataProvider().fieldNameIndex( 'id2' ) 
        uv = layer.dataProvider().uniqueValues( idx )
        uv1=[str("v"+str(x)) for x in uv]
        uv1.sort()
        self.dlg.firstcomboBox.addItems(uv1)
        self.dlg.secondcomboBox.addItems(uv1)
        
        # adding vertices to the drop down
        layer = iface.activeLayer()
        for layer in QgsProject.instance().mapLayers().values():
            layer_settings  = QgsPalLayerSettings()
            layer_settings.fieldName = "Id2"
            layer_settings.enabled = True
            layer_settings = QgsVectorLayerSimpleLabeling(layer_settings)
            layer.setLabelsEnabled(True)
            layer.setLabeling(layer_settings)
            layer.triggerRepaint()

    def splitpoly(self):
        
        ########## variables ####################
        v=[]
        v1=[]
        v2=[]
        xend=[]
        yend=[]
        idend=[]
        x=[]
        y=[]
        global id2
        ############# Extracting all vertices of polygon in a list - ver#########################
        id2=self.dlg.selectComboBox.currentText()
        
        filename = self.dlg.inputlineEdit.text()

        layerList = QgsProject.instance().mapLayersByName("polygon")
        layer=layerList[0]
        gdf = gpd.read_file(filename)
        features = layer.getFeatures()
        global gid
        for feat in features:
            if(id2==feat['ID1']):  
                print(id2)  
                print("feat['ID1']")
                print(feat['ID1'])   
                gid=feat.id()                        
                mypolygon=gdf.loc[gid,'geometry']   
        
        ver=list(mypolygon.exterior.coords)
        #print("vertices of polygon")
        #print(ver)
        shapely_poly = shapely.geometry.Polygon(ver)
        
        ####### Extract vertex number from comboBox ##################33
        a=self.dlg.firstcomboBox.currentText()
        b=self.dlg.secondcomboBox.currentText()
        v.append(int(a[1:]))
        v.append(int(b[1:]))
        ################## Values from input boxes#################################################
        
        

        vf1=self.dlg.forwardlineEdit1.text()    # horizontal of first vertex
        vb1=self.dlg.backwardlineEdit1.text()   #vertical of first vertex
        vf2=self.dlg.forwardlineEdit2.text()    #horizontal of second vertex
        vb2=self.dlg.backwardlineEdit2.text()   #vertical of second vertex
        
        # print("v[0]")
        # print(v[0])
        # print("v[1]")
        # print(v[1])
        if(v[0]<v[1]):
            if(vf1==""):
                v1.append(float(0))
            else:
                v1.append(float(vf1))

            if(vb1==""):
                v1.append(float(0))
            else:
                v1.append(float(vb1))

            if(vf2==""):
                v2.append(float(0))
            else:
                v2.append(float(vf2))

            if(vb2==""):
                v2.append(float(0))
            else:
                v2.append(float(vb2))
        
        else:
            v.sort()
            if(vf2==""):
                v1.append(float(0))
            else:
                v1.append(float(vf2))

            if(vb2==""):
                v1.append(float(0))
            else:
                v1.append(float(vb2))

            if(vf1==""):
                v2.append(float(0))
            else:
                v2.append(float(vf1))

            if(vb1==""):
                v2.append(float(0))
            else:
                v2.append(float(vb1))


        ##### These are points to be added to x and y coordinates of vertices for distance  #########
        # print("v1:")
        # print(v1)
        # print("v2:")
        # print(v2)

        ################## Getting points from user to draw line #################################

        

        ########## Extract points of the selected vertices ###################
        layerList = QgsProject.instance().mapLayersByName("point")
        layer=layerList[0]
        layer.select(v)
        selection = layer.selectedFeatures()
        for feat in selection:
            idend.append(feat['id2'])
            xend.append(feat['xCord'])
            yend.append(feat['yCord'])
        
        ##########  Calculating points for line creation ##########################
        if(idend[0]>idend[1]):
            x.append(float( float(xend[1]) + v1[0] ))
            y.append(float( float(yend[1]) + v1[1]))
            x.append(float( float(xend[0]) + v2[0] ))
            y.append(float( float(yend[0]) + v2[1]))
        else: 
            x.append(float( float(xend[0]) + v1[0] ))
            y.append(float( float(yend[0]) + v1[1]))
            x.append(float( float(xend[1]) + v2[0] ))
            y.append(float( float(yend[1]) + v2[1]))

        ########## Line for dividing polygon ###########################

        line = [(x[0],y[0]), (x[1],y[1])]
        #print(line)
        shapely_line = shapely.geometry.LineString(line)

        ########## intersection of line and polygon ############################

        intersection_line = list(shapely_poly.intersection(shapely_line).coords)
        print("intersection_line")
        print(intersection_line)

        ########### create vector layer for line #########################

        # layer=QgsVectorLayer('LineString?crs=EPSG:32645','Linedivider1','memory')
        # provider=layer.dataProvider()
        # f=QgsFeature()
        # f.setGeometry(QgsGeometry.fromPolylineXY([QgsPointXY(float(intersection_line[0][0]),float(intersection_line[0][1])),QgsPointXY(float(intersection_line[1][0]), float(intersection_line[1][1]))]))
        # provider.addFeature(f)
        # layer.updateExtents()
        # QgsProject.instance().addMapLayer(layer)
        
        ############## plotting the new points in layer ##############################

        layer=QgsVectorLayer('Point?crs=EPSG:32645','intersectionpoints','memory')
        provider=layer.dataProvider()
        f=QgsFeature()
        provider.addAttributes([QgsField('id',QVariant.Int)])
        provider.addAttributes([QgsField('x',QVariant.String)])
        provider.addAttributes([QgsField('y',QVariant.String)])
        layer.updateFields()
        p1=QgsPointXY(float(intersection_line[0][0]),float(intersection_line[0][1]))
        f.setGeometry(QgsGeometry.fromPointXY(p1))
        f.setAttributes([1,str(intersection_line[0][0]),str(intersection_line[0][1])])
        provider.addFeature(f)

        p1=QgsPointXY(float(intersection_line[1][0]),float(intersection_line[1][1]))
        f.setGeometry(QgsGeometry.fromPointXY(p1))
        f.setAttributes([2,str(intersection_line[1][0]),str(intersection_line[1][1])])
        provider.addFeature(f)

        layer.updateExtents()
        QgsProject.instance().addMapLayer(layer)

        ################### finding id for new points ###################################

        point1 = QgsPointXY(intersection_line[0][0],intersection_line[0][1])
        point2 = QgsPointXY(intersection_line[1][0],intersection_line[1][1])

        if(v[0]==1):
            checkid1=len(ver)-1
        else:
            checkid1=v[0]-1
        
        if(v[0]==len(ver)):
            checkid2=1
        else:
            checkid2=v[0]+1
        
        if(v[1]==1):
            checkid3=len(ver)-1
        else:
            checkid3=v[1]-1
        
        if(v[1]==len(ver)):
            checkid4=2
        else:
            checkid4=v[1]+1

        print("checkid1")
        print(checkid1)
        print("checkid2")
        print(checkid2)
        print("checkid3")
        print(checkid3)
        print("checkid4")
        print(checkid4)
        
        

        ################ Calculating id for intersection point #####################################

        ############################## vertex 1 ####################################################

        pv1 = QgsPointXY(float(ver[checkid1-1][0]),float(ver[checkid1-1][1]))
        pv3=QgsPointXY(float(ver[checkid2-1][0]),float(ver[checkid2-1][1]))
        pv2=QgsPointXY(float(ver[v[0]-1][0]),float(ver[v[0]-1][1]))

        point_feature = QgsFeature()
        point_feature.setGeometry(QgsGeometry.fromPointXY(point1))

        line_feature1 = QgsFeature()
        line_feature1.setGeometry(QgsGeometry.fromPolylineXY([pv1,pv2]))
        line_feature2 = QgsFeature()
        line_feature2.setGeometry(QgsGeometry.fromPolylineXY([pv2,pv3]))

        if(vf1=="" and vb1==""): 
            myid1=v[0]
        
        else:

            # Check if the point is on the line between vertex1 and vertex1-1 

            result= str(line_feature1.geometry().closestSegmentWithContext(point_feature.geometry().asPoint()))
            r=result.split(",")
            r2=r[0]
            r1=float(r2[1:])
            if (r1== 0.0):
                myid1=v[0]
            
            # Check if the point is on the line between vertex1 and vertex1+1

            result= str(line_feature2.geometry().closestSegmentWithContext(point_feature.geometry().asPoint()))
            r=result.split(",")
            r2=r[0]
            r1=float(r2[1:])
            if (r1== 0.0):
                myid1=v[0]+1
            
        print("id of first vertex ")
        print(myid1)


        ############################# vertex 2 ############################################################
        pv4 = QgsPointXY(float(ver[checkid3-1][0]),float(ver[checkid3-1][1]))
        pv6=QgsPointXY(float(ver[checkid4-1][0]),float(ver[checkid4-1][1]))
        pv5=QgsPointXY(float(ver[v[1]-1][0]),float(ver[v[1]-1][1]))

        point_feature = QgsFeature()
        point_feature.setGeometry(QgsGeometry.fromPointXY(point2))

        line_feature3 = QgsFeature()
        line_feature3.setGeometry(QgsGeometry.fromPolylineXY([pv4,pv5]))
        line_feature4 = QgsFeature()
        line_feature4.setGeometry(QgsGeometry.fromPolylineXY([pv5,pv6]))

        if(vf2=="" and vb2==""): 
            myid2=v[1]
        
        else:

            # Check if the point is on the line between vertex1 and vertex1-1 

            result= str(line_feature3.geometry().closestSegmentWithContext(point_feature.geometry().asPoint()))
            r=result.split(",")
            r2=r[0]
            r1=float(r2[1:])
            if (r1== 0.0):
                myid2=v[1]
            
            # Check if the point is on the line between vertex1 and vertex1+1

            result= str(line_feature4.geometry().closestSegmentWithContext(point_feature.geometry().asPoint()))
            r=result.split(",")
            r2=r[0]
            r1=float(r2[1:])
            if (r1== 0.0):
                myid2=v[1]+1
            
        print("id of second vertex ")
        print(myid2)

        ######################## separating the polygon into two polygons using the intersection vertices #######################
        xpoint=[]
        ypoint=[]

        layerList = QgsProject.instance().mapLayersByName("point")
        layer=layerList[0]
        features = layer.getFeatures()
        gdf = gpd.read_file(filename)
        j=0
        for feat in features:
            xpoint.append(feat['xCord'])
            ypoint.append(feat['yCord'])
            j+=1
            
        pointList1=[]
        pointList2=[]
        global poly1,poly2
        poly1=[]
        poly2=[]
        ################################## Adding points in list #################### 
        xpoint.insert(myid1-1,intersection_line[0][0])
        ypoint.insert(myid1-1,intersection_line[0][1])
        xpoint.insert(myid2,intersection_line[1][0])
        ypoint.insert(myid2,intersection_line[1][1])
        j=j+2
        for i in range(j):
            print(str(i)+":"+str(xpoint[i])+","+str(ypoint[i]))
            
        
        ###################333distributing points into two polygon
        for i in range(j):

            if( i>=(myid1-1) and i<=(myid2)):
                
                temp=QgsPointXY(float(xpoint[i]),float(ypoint[i]))
                poly1.append(temp)
                
            if(i<=(myid1-1)):
                
                temp=QgsPointXY(float(xpoint[i]),float(ypoint[i]))
                poly2.append(temp)
            
            if(i>=(myid2)):
                
                temp=QgsPointXY(float(xpoint[i]),float(ypoint[i]))
                poly2.append(temp)

        end1=poly1[0]
        end2=poly2[0]
        poly1.append(end1)
        poly2.append(end2)

        pointList1 = geometry.Polygon(poly1)
        pointList2 = geometry.Polygon(poly2)

        layer =  QgsVectorLayer('Polygon?crs=EPSG:32645', 'polydivider1' , "memory")
        pr = layer.dataProvider() 

        pr.addAttributes([QgsField('ID1',QVariant.String)])
        pr.addAttributes([QgsField('xCentroid',QVariant.String)])
        pr.addAttributes([QgsField('yCentroid',QVariant.String)])
        pr.addAttributes([QgsField("Latitude",QVariant.String)])
        pr.addAttributes([QgsField("Longitude",QVariant.String)])
        pr.addAttributes([QgsField("unique id",QVariant.String)])
        pr.addAttributes([QgsField('polygon',QVariant.String)])
        layer.updateFields()
        poly = QgsFeature()
        global finalid1,finalid2
        finalid1=str(str(id2)+"/1")
        finalid2=str(str(id2)+"/2")
        # finalid1="159"
        # finalid2="160"
        

        c1=list(pointList1.centroid.coords)
        c2=list(pointList2.centroid.coords)

        h1=utm.to_latlon(c1[0][0], c1[0][1], 45, 'N')
        h2=utm.to_latlon(c2[0][0], c2[0][1], 45, 'N')

        code1=pniUgenerator(h1[0],h1[1],0)
        code2=pniUgenerator(h2[0],h2[1],0)
        poly.setAttributes([finalid1,str(c1[0][0]),str(c1[0][1]),str(h1[0]),str(h1[1]),str(code1),str(pointList1)])
        
        poly.setGeometry(QgsGeometry.fromPolygonXY([poly1]))
        pr.addFeatures([poly])
        
        poly.setGeometry(QgsGeometry.fromPolygonXY([poly2]))
        poly.setAttributes([finalid2,str(c2[0][0]),str(c2[0][1]),str(h2[0]),str(h2[1]),str(code2),str(pointList2)])
        pr.addFeatures([poly])
        
        layer.updateExtents()
        QgsProject.instance().addMapLayer(layer)
        
        ########################centroid layer ####################################333
        print("creating centroid layer for polygons" )
        layer=QgsVectorLayer('Point?crs=EPSG:32645','polycentroid','memory')
        provider=layer.dataProvider()
        provider.addAttributes([QgsField('id2',QVariant.String)])
        provider.addAttributes([QgsField('xCentroid',QVariant.String)])
        provider.addAttributes([QgsField('yCentroid',QVariant.String)])
        layer.updateFields()
        f=QgsFeature()
        p1=QgsPointXY(c1[0][0],c1[0][1])
        f.setGeometry(QgsGeometry.fromPointXY(p1))
        f.setAttributes([finalid1,str(c1[0][0]),str(c1[0][1])])
        provider.addFeature(f)
        p1=QgsPointXY(c2[0][0],c2[0][1])
        f.setGeometry(QgsGeometry.fromPointXY(p1))
        f.setAttributes([finalid2,str(c2[0][0]),str(c2[0][1])])
        provider.addFeature(f)
        layer.updateExtents()
        QgsProject.instance().addMapLayer(layer)

        

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = SplitDialog()
            self.dlg.inputpushButton.clicked.connect(self.Upload_Point_Layer1)
            self.dlg.confirmpushButton.clicked.connect(self.Upload_Point_Layer2)
            self.dlg.splitpushButton.clicked.connect(self.splitpoly)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            layerList = QgsProject.instance().mapLayersByName("polygon")
            layer=layerList[0]
            
            l1=[]
            l2=[]
            field_names = [field.name() for field in layer.fields()]
            i=1
            for field in field_names:
                
                if(field=='ID1'):
                    l1.append(finalid1)
                    l2.append(finalid2)
                    i+=1
                else:
                    l1.append(0)
                    l2.append(0)
                    i+=1

            print(l1)
            print(l2)
            pr = layer.dataProvider() 
            poly = QgsFeature()
            poly.setAttributes(l1)
        
            poly.setGeometry(QgsGeometry.fromPolygonXY([poly1]))
            pr.addFeatures([poly])
            
            poly.setGeometry(QgsGeometry.fromPolygonXY([poly2]))
            poly.setAttributes(l2)
            pr.addFeatures([poly])
            
            layer.updateExtents()


            ######### deleting row
            layers=QgsProject.instance().mapLayersByName('polygon')
            layer=layers[0]
            caps=layer.dataProvider().capabilities()
            
            dfeats=[]
            selection = layer.selectedFeatures()
            # creating point layer for selected plot
            for feat in selection:
                id=feat.id()
                layer.deselect(id)

            if caps & QgsVectorDataProvider.DeleteFeatures:
                print("id")
                print(id)
                dfeats.append(id)
                res=layer.dataProvider().deleteFeatures(dfeats)


            ######## deselect the selected plot

            layerList = QgsProject.instance().mapLayersByName("polygon")
            layer=layerList[0]
            selection = layer.selectedFeatures()
            # creating point layer for selected plot
            for feat in selection:
                id=feat.id()
                layer.deselect(id)
            
            features = layer.getFeatures()
            for feat in features:
                if(finalid1==feat['ID1']):  
                    gid1=feat.id()      
                if(finalid2==feat['ID1']):  
                    gid2=feat.id()         

            print(gid1)
            layer.select(gid1)
            print(gid2)
            layer.select(gid2)    
            print("hello")   

            ############################################ ADDING OTHER ATTRIBUTE VALUES ########################################
            xc=[]
            yc=[]
            lat=[]
            lon=[]
            c1=[]
            g=[]
            gdf = gpd.read_file(filename)
            layer_provider=layer.dataProvider()
            abc=layer.fields().names()
            l=len(abc)
            a=abc.count('Xcentroid')

            flag=0
            features = layer.getFeatures()
            for feat in features:
                id=feat.id()
                mypolygon=gdf.loc[id,'geometry']
                try:
                    c=list(mypolygon.centroid.coords)
                except:
                    flag+=1
                g.append(mypolygon)
                xc.append(c[0][0])
                yc.append(c[0][1])

            if a==0 :
                layer_provider.addAttributes([QgsField("Xcentroid",QVariant.String)])
                layer_provider.addAttributes([QgsField("Ycentroid",QVariant.String)])
                layer_provider.addAttributes([QgsField("Latitude",QVariant.String)])
                layer_provider.addAttributes([QgsField("Longitude",QVariant.String)])
                layer_provider.addAttributes([QgsField("unique id",QVariant.String)])
                layer_provider.addAttributes([QgsField("Multipolygon",QVariant.String)])
                g=[]
                layer.updateFields()
                layer.startEditing()
                features = layer.getFeatures()
                
                for feat in features:
                    id=feat.id()
                    mypolygon=gdf.loc[id,'geometry']
                    try:
                        c=list(mypolygon.centroid.coords)
                    except:
                        flag+=1
                    a1={l:str(c[0][0])}
                    a2={l+1:str(c[0][1])}
                    g.append(mypolygon)
                    xc.append(c[0][0])
                    yc.append(c[0][1])
                    layer_provider.changeAttributeValues({id:a1})
                    layer_provider.changeAttributeValues({id:a2})
                    h=utm.to_latlon(xc[id], yc[id], 45, 'N')
                    lat.append(h[0])
                    lon.append(h[1])
                    code=pniUgenerator(h[0],h[1],0)
                    c1.append(code)
                    lat1=str(lat[id])
                    a3={l+2:lat1}
                    lon1=str(lon[id])
                    a4={l+3:lon1}
                    a5={l+4:c1[id]}
                    a6={l+5:str(gdf.loc[id,'geometry'])}
                    layer_provider.changeAttributeValues({id:a3})
                    layer_provider.changeAttributeValues({id:a4})
                    layer_provider.changeAttributeValues({id:a5})
                    layer_provider.changeAttributeValues({id:a6})
                    
                layer.commitChanges()  
            else:
                l=abc.index('Xcentroid')
                
                layer.updateFields()
                layer.startEditing()
                features = layer.getFeatures()
                for feat in features:
                    if(feat['ID1']==finalid1):
                        id=feat.id()
                        mypolygon=gdf.loc[id,'geometry']
                        try:
                            c=list(mypolygon.centroid.coords)
                        except:
                            flag+=1
                        a1={l:str(c[0][0])}
                        a2={l+1:str(c[0][1])}
                        g.append(mypolygon)
                        xc.append(c[0][0])
                        yc.append(c[0][1])
                        layer_provider.changeAttributeValues({id:a1})
                        layer_provider.changeAttributeValues({id:a2})
                        h=utm.to_latlon(xc[id], yc[id], 45, 'N')
                        lat.append(h[0])
                        lon.append(h[1])
                        code=pniUgenerator(h[0],h[1],0)
                        c1.append(code)
                        lat1=str(lat[0])
                        a3={l+2:lat1}
                        lon1=str(lon[0])
                        a4={l+3:lon1}
                        a5={l+4:c1[0]}
                        a6={l+5:str(gdf.loc[id,'geometry'])}
                        layer_provider.changeAttributeValues({id:a3})
                        layer_provider.changeAttributeValues({id:a4})
                        layer_provider.changeAttributeValues({id:a5})
                        layer_provider.changeAttributeValues({id:a6})
                        layer.commitChanges()
                    elif(feat['ID1']==finalid2):
                        id=feat.id()
                        mypolygon=gdf.loc[id,'geometry']
                        try:
                            c=list(mypolygon.centroid.coords)
                        except:
                            flag+=1
                        a1={l:str(c[0][0])}
                        a2={l+1:str(c[0][1])}
                        g.append(mypolygon)
                        xc.append(c[0][0])
                        yc.append(c[0][1])
                        layer_provider.changeAttributeValues({id:a1})
                        layer_provider.changeAttributeValues({id:a2})
                        h=utm.to_latlon(xc[id], yc[id], 45, 'N')
                        lat.append(h[0])
                        lon.append(h[1])
                        code=pniUgenerator(h[0],h[1],0)
                        c1.append(code)
                        lat1=str(lat[1])
                        a3={l+2:lat1}
                        lon1=str(lon[1])
                        a4={l+3:lon1}
                        a5={l+4:c1[1]}
                        a6={l+5:str(gdf.loc[id,'geometry'])}
                        layer_provider.changeAttributeValues({id:a3})
                        layer_provider.changeAttributeValues({id:a4})
                        layer_provider.changeAttributeValues({id:a5})
                        layer_provider.changeAttributeValues({id:a6})
                        layer.commitChanges()


def dec_to_base(num,base):  
    base_num = ""
    while num>0:
        dig = int(num%base)
        if dig<10:
            base_num += str(dig)
        else:
            base_num += chr(ord('A')+dig-10) 
        num //= base
    base_num = base_num[::-1]  
    return base_num
    
def pniUgenerator(latitude,longitude,f):
  lat = str(latitude)
  splitLat = lat.split(".")
  splitLat[0] = splitLat[0].ljust( 2, "0")
  splitLat[1] = splitLat[1].rjust(6, "0")
  lat1 = int(splitLat[0])
  lat1 += 90
  lat1= dec_to_base(lat1,14)
  slat1 = (str(lat1)).upper()
  slat1=slat1.ljust(2,"0")
  slat1 = slat1.replace("I", "Y")
  slat1 = slat1.replace("O", "Z")
  lat2 = int(splitLat[1][:3])
  lat2=dec_to_base(lat2,32)
  slat2 =(str(lat2)).upper()
  slat2=slat2.ljust(2,"0")
  slat2 = slat2.replace("I", "Y")
  slat2 = slat2.replace("O", "Z")
  lat3 = int(splitLat[1][3:6])
  lat3=dec_to_base(lat3,32)
  slat3 = (str(lat3)).upper()
  slat3=slat3.ljust(2,"0")
  slat3 = slat3.replace("I", "Y")
  slat3 = slat3.replace("O", "Z")
  lon=str(longitude)
  splitLon=lon.split(".")
  splitLon[0] = splitLon[0].ljust( 2, "0")
  splitLon[1] =splitLon[1].rjust( 6, "0")
  lon1 = int(splitLon[0])
  lon1 += 180
  lon1=dec_to_base(lon1,19)
  slon1 = (str(lon1)).upper()
  slon1 = slon1.replace("I", "Y")
  slon1 = slon1.replace("O", "Z")
  lon2 = int(splitLon[1][0:3])
  lon2 = dec_to_base(lon2, 32)
  slon2=(str(lon2)).upper()
  slon2=slon2.ljust(2,"0")
  slon2 = slon2.replace("I", "Y")
  slon2 = slon2.replace("O", "Z")
  lon3 = int(splitLon[1][3:6])
  lon3=dec_to_base(lon3,32)
  slon3 = (str(lon3)).upper()
  slon3 = slon3.ljust(2,"0")
  slon3 = slon3.replace("I", "Y")
  slon3 = slon3.replace("O", "Z")
  f1 = f + 578
  f1 = dec_to_base(f1, 34)
  f2= (str(f1)).upper()
  f2 =f2.ljust(2,"0")
  f2 = f2.replace("I", "Y")
  f2 = f2.replace("O", "Z")
  pniU=slat1+slat2+slat3+"-"+slon1+slon2+slon3+"-"+f2
  return(pniU)